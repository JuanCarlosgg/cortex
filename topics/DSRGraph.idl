
    union Val switch(long) {
      case 0:
        string str;
      case 1:
        long dec;
      case 2:
        float fl;
      case 3:
        sequence<float>  float_vec;
      case 4:
        boolean bl;
      case 5:
        sequence<octet> byte_vec;
    };

    enum Types
    {
        _STRING,
        _INT,
        _FLOAT,
        _FLOAT_VEC,
        _BOOL,
        _BYTE_VEC
       // _RT_MAT
    };

    struct _Attrib
    {
        long type;
        Val value;
        unsigned long long timestamp;
    };

    struct PairInt {
        long first;
        long second;
    };

    struct PairAttribInt {
        long first;
        Attrib second;
    };

    struct DotContextAttrs {
        map<Attrib, long> cc;
        sequence<PairAttribInt> dc;
    };

    struct DotKernelAttr {
        map<PairInt, Attrib> ds;
        DotContextAttrs cbase;
    };

    struct MvregEdgeAttr {
        long id;
        long from;
        long to;
        long type;
        DotKernelAttr dk;
        long agent_id; // to skip messages from the same agent in multithread.
    };

    struct Edge {
        long to; //key1
		string type; //key2
		long from; // Se mantiene para trabajar más fácilmente con los Edges.
		map<string, MvregEdgeAttr>    attrs;
	};

    struct EdgeKey {
        long to;
        string type;
    };

    struct MvregNodeAttr {
        long id;
        long node;
        DotKernelAttr dk;
        long agent_id; // to skip messages from the same agent in multithread.
    };

    struct PairEdgeInt {
        long first;
        Edge second;
    };

    struct DotContextEdge {
        map<Edge, long> cc;
        sequence<PairEdgeInt> dc;
    };

    struct DotKernelEdge {
        map<PairInt, Attrib> ds;
        DotContextEdge cbase;
    };

    struct MvregEdge {
        long id;
        long from;
        long to;
        long type;
        DotKernelEdge dk;
        long agent_id; // to skip messages from the same agent in multithread.
    };

    struct Node {
        string type;
        string name;
        long id;
        long agent_id;
		map<string, MvregNodeAttr>   attrs;
		map<EdgeKey, MvregEdge> fano;
    };

    struct GraphRequest
    {
        string from;
    };



    struct DotContext {
        map<long, long> cc;
        sequence<PairInt> dc;
    };

    struct DotKernel {
        map<PairInt, Node> ds;
        DotContext cbase;
    };

    struct Mvreg {
        long id;
        DotKernel dk;
        long agent_id; // to skip messages from the same agent in multithread.
    };

    struct OrMap {
        long id;
        map<long, Mvreg> m;
        DotContext cbase;
    };



